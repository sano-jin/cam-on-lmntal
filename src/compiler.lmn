% let x = plus in x (4,(let x = 3 in x));

cam((), Code, []).
Code = [cmpl(E, [])].
E = let("x", plus, app("x", (4, let("x", 3, "x")))).

{'$callback'(zerostep).
curry @@
 R = fun([V|Vs], E) :- R = abs(V, fun(Vs, E)).
 R = fun([], E) :- R = E.
 
let @@
 R = let(V, E1, E2) :- string(V) | R = app(abs(V, E2), E1).
 
plus @@
 R = E1 + E2 :- R = app(plus, (E1, E2)).
}.

// compiler
abs @@
 P = [cmpl(abs(Var, Body), Env)|N]
 :- P = [cur([cmpl(Body, [Var|Env])])|N].
 
tuple @@ 
 P = [cmpl((E1, E2), Env)|N]
 :- ground(Env)
 | P = [push, cmpl(E1, Env), swap, cmpl(E2, Env), cons|N].
 
lookup_var @@ 
 P = [cmpl(V1, [V2|T])|N]
 :- string(V1), V1 \== V2
 | P = [fst, cmpl(V1, T)|N].

resolve_var @@ 
 P = [cmpl(V1, [V2|T])|N]
 :- string(V1), V1 == V2, ground(T)
 | P = [snd|N].
 
app @@ 
 P = [cmpl(app(E1, E2), Env)|N]
 :- P = [cmpl((E1, E2), Env), app|N]. 
 
number @@
 P = [cmpl(Val, Env)|N]
 :- int(Val), ground(Env)
 | P = [quote(Val)|N]. 

plus @@
 P = [cmpl(plus, Env)|N]
 :- ground(Env)
 | P = [cur([snd, plus])|N].

 
 



